#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Mon Jan 26 17:57:13 2009

import os
import pickle
import optparse
from time import time
import ConfigParser
import csv

import wx
#import wx.lib.customtreectrl as CT
import wx.lib.masked as masked
import matplotlib
matplotlib.use('WXAgg')
import numpy as np
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import \
    FigureCanvasWxAgg as FigCanvas, \
    NavigationToolbar2WxAgg as NavigationToolbar
import matplotlib.colors as colors

import EnhancedStatusBar as ESB
from support import *
from datadef import *

ver = "1.2"

class PlotOptions(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PlotOptions.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_7 = wx.Panel(self, -1)
        self.label_6 = wx.StaticText(self.panel_7, -1, "Title:")
        self.TitleTB = wx.TextCtrl(self.panel_7, -1, "")
        self.label_7 = wx.StaticText(self.panel_7, -1, "X axis label:")
        self.XAxis = wx.TextCtrl(self.panel_7, -1, "")
        self.label_7_copy_1 = wx.StaticText(self.panel_7, -1, "Y axis label:")
        self.YAxis = wx.TextCtrl(self.panel_7, -1, "")
        self.Apply = wx.Button(self.panel_7, -1, "Apply")
        self.Clear = wx.Button(self.panel_7, -1, "Clear")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnApply, self.Apply)
        self.Bind(wx.EVT_BUTTON, self.OnClear, self.Clear)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PlotOptions.__set_properties
        self.SetTitle("Plot Options")
        self.label_6.SetMinSize((100, 13))
        self.TitleTB.SetMinSize((300, 21))
        self.label_7.SetMinSize((100, 13))
        self.XAxis.SetMinSize((300, 21))
        self.label_7_copy_1.SetMinSize((100, 13))
        self.YAxis.SetMinSize((300, 21))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PlotOptions.__do_layout
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6_copy_1.Add((10, 10), 0, 0, 0)
        sizer_7.Add((10, 10), 0, 0, 0)
        sizer_9.Add(self.label_6, 0, 0, 0)
        sizer_9.Add(self.TitleTB, 0, 0, 0)
        sizer_8.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_10.Add(self.label_7, 0, 0, 0)
        sizer_10.Add(self.XAxis, 0, 0, 0)
        sizer_8.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_11.Add(self.label_7_copy_1, 0, 0, 0)
        sizer_11.Add(self.YAxis, 0, 0, 0)
        sizer_8.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_8.Add((10, 10), 0, 0, 0)
        sizer_18.Add((10, 10), 1, 0, 0)
        sizer_18.Add(self.Apply, 0, 0, 0)
        sizer_18.Add((10, 10), 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_18.Add(self.Clear, 0, 0, 0)
        sizer_18.Add((10, 10), 1, 0, 0)
        sizer_8.Add(sizer_18, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_7.Add((10, 10), 0, 0, 0)
        sizer_6_copy_1.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_6_copy_1.Add((10, 10), 0, 0, 0)
        self.panel_7.SetSizer(sizer_6_copy_1)
        sizer_6.Add(self.panel_7, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_6)
        sizer_6.Fit(self)
        self.Layout()
        # end wxGlade

    def OnApply(self, event): # wxGlade: PlotOptions.<event_handler>
        frame_1.axes.set_title(self.TitleTB.GetValue())
        frame_1.axes.set_xlabel(self.XAxis.GetValue())
        frame_1.axes.set_ylabel(self.YAxis.GetValue())
        frame_1.canvas.draw()
        

    def OnClear(self, event): # wxGlade: PlotOptions.<event_handler>
        frame_1.titletext.set_visible(False)
        frame_1.canvas.draw()
        

# end of class PlotOptions
class GroupFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: GroupFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_5 = wx.Panel(self, -1)
        self.label_10 = wx.StaticText(self.panel_5, -1, "Group By:")
        self.GroupByCLB = wx.CheckListBox(self.panel_5, -1, choices=[])
        self.label_11 = wx.StaticText(self.panel_5, -1, "Result")
        self.ResultLC = wx.ListCtrl(self.panel_5, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.Bind(wx.EVT_CHECKLISTBOX, self.OnCBCheck, self.GroupByCLB)
        self.Bind(wx.EVT_CLOSE, self.onClose)
        self.PopulateFactors()
        self.SetCols()
        for i in data.groupon:
            self.GroupByCLB.Check(i)
        
    def onClose(self, event):
        frame_1.onFocus()
        self.Destroy()

    def __set_properties(self):
        # begin wxGlade: GroupFrame.__set_properties
        self.SetTitle("Factor groups")
        self.GroupByCLB.SetMinSize((130, 200))
        self.ResultLC.SetMinSize((365, 200))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: GroupFrame.__do_layout
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.VERTICAL)
        sizer_23.Add((20, 20), 0, 0, 0)
        sizer_24.Add((20, 20), 0, 0, 0)
        sizer_25.Add(self.label_10, 0, 0, 0)
        sizer_25.Add(self.GroupByCLB, 0, 0, 0)
        sizer_24.Add(sizer_25, 0, wx.EXPAND, 0)
        sizer_24.Add((20, 20), 0, 0, 0)
        sizer_25_copy.Add(self.label_11, 0, 0, 0)
        sizer_25_copy.Add(self.ResultLC, 1, wx.EXPAND, 0)
        sizer_24.Add(sizer_25_copy, 1, wx.EXPAND, 0)
        sizer_24.Add((20, 20), 0, 0, 0)
        sizer_23.Add(sizer_24, 1, wx.EXPAND, 0)
        sizer_23.Add((20, 20), 0, 0, 0)
        self.panel_5.SetSizer(sizer_23)
        sizer_17.Add(self.panel_5, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_17)
        sizer_17.Fit(self)
        self.Layout()
        # end wxGlade
    
    def PopulateFactors(self):
        lst=[data.factors[i] for i in range(len(data.factors))]
        #lst.sort()
        self.GroupByCLB.AppendItems(lst)
    
    def SetCols(self):
        for i, nm in enumerate(data.factors):
            self.ResultLC.InsertColumn(i, nm)

    def OnSaveGroup(self, event): # wxGlade: GroupFrame.<event_handler>
        print "Event handler `OnSaveGroup' not implemented!"
        
        
    def OnCBCheck(self, event):
        names=[]
        lst=[]
        groupon = []
        for i, item in enumerate(data.factors):
            names.append(item)
            if self.GroupByCLB.IsChecked(i):
                lst.append(data.settings[item])
                groupon.append(i)
            else:
                lst.append(["ALL"])
        #print groupon
        data.groups=vstack(x for x in cprod(lst))
        data.groupnames=names
        data.groupon = groupon
        #print data.groupnames
        #print data.factors
        
        #result=[', '.join(data.groups[i]) for i in range(len(data.groups))]
        #print result
        
        self.ResultLC.DeleteAllItems()
        for i in range(len(data.groups)):
            self.ResultLC.Append(data.groups[i])
            
        #cols=range(    
        #for i, gp in enumerate(data.groups):
        #    for j in range(len(data.factors)):
        #        if gp[j] == "ALL":
                    
        data.group_cols=[range(len(data.colnames)) for i in range(len(data.groups))]
        for i in range(len(data.groups)):
            for j in range(len(data.groups[0])):
                #print where(data.colsettings[:j]==data.groups[i][j])
                if data.groups[i][j] != "ALL":
                    data.group_cols[i]=np.intersect1d(data.group_cols[i], where(data.colsettings[:,j]==data.groups[i][j])[0] )       
        
        #self.Result_LB.AppendItems(result)
        
        #for i, item in enumerate(data.groups):
            #populate=["Group " + str(i) + ": " + names[j] + " = " + data.groups[i,j] for j in range(len(names))]
            #print ["Group " + str(i) + ": " + names[j] + " = " + data.groups[i,j] for j in range(len(names))]
            #self.ResultLB.
        #print populate
        

# end of class GroupFrame
class DataImportFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DataImportFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        self.label_1 = wx.StaticText(self.panel_1, -1, "Factors")
        self.factor_lb = wx.ListBox(self.panel_1, -1, choices=[])
        self.label_2 = wx.StaticText(self.panel_1, -1, "Settings")
        self.setting_lb = wx.ListBox(self.panel_1, -1, choices=[])
        self.label_3 = wx.StaticText(self.panel_1, -1, "Name:")
        self.name_tc = wx.TextCtrl(self.panel_1, -1, "")
        self.button_2 = wx.Button(self.panel_1, -1, "Load factor definitions file")
        self.Save = wx.Button(self.panel_1, -1, "Save factor definitions file")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.OnFactorSelect, self.factor_lb)
        self.Bind(wx.EVT_TEXT, self.OnNameEdit, self.name_tc)
        self.Bind(wx.EVT_BUTTON, self.OnLoadFactorDefs, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.OnSaveFactorDefs, self.Save)
        # end wxGlade
        if len(data.factors) > 0:
            self.factor_lb.Clear()
            self.factor_lb.AppendItems(data.factors)
        else:
            factors = range(len(data.colsettings[0,:]))
            for factor in reversed(factors):
                #factors[i] = str(factor)
                self.factor_lb.Insert(str(factor), 0)

    def __set_properties(self):
        # begin wxGlade: DataImportFrame.__set_properties
        self.SetTitle("Data Import Settings")
        self.factor_lb.SetMinSize((130, 200))
        self.setting_lb.SetMinSize((130, 200))
        self.name_tc.SetMinSize((130, 20))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DataImportFrame.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_14_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_12.Add((20, 20), 0, 0, 0)
        sizer_14.Add(self.label_1, 0, 0, 0)
        sizer_14.Add(self.factor_lb, 0, 0, 0)
        sizer_12.Add(sizer_14, 1, wx.EXPAND, 0)
        sizer_12.Add((20, 20), 0, 0, 0)
        sizer_14_copy.Add(self.label_2, 0, 0, 0)
        sizer_14_copy.Add(self.setting_lb, 0, 0, 0)
        sizer_12.Add(sizer_14_copy, 1, wx.EXPAND, 0)
        sizer_12.Add((20, 20), 0, 0, 0)
        sizer_15.Add(self.label_3, 0, 0, 0)
        sizer_15.Add(self.name_tc, 0, 0, 0)
        sizer_15.Add((20, 20), 0, 0, 0)
        sizer_15.Add(self.button_2, 0, 0, 0)
        sizer_15.Add((20, 10), 0, 0, 0)
        sizer_15.Add(self.Save, 0, 0, 0)
        sizer_12.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_12.Add((20, 20), 0, 0, 0)
        sizer_16.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_16.Add((20, 20), 0, 0, 0)
        self.panel_1.SetSizer(sizer_16)
        sizer_4.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_4)
        sizer_4.Fit(self)
        self.Layout()
        # end wxGlade

    def OnApply(self, event): # wxGlade: DataImportFrame.<event_handler>
        #print self.factor_lb.GetItems()
        #print self.factor_lb.GetItems()[0]
        #print self.factor_lb.GetStringSelection()
        data.factors=self.factor_lb.GetItems()
        data.settings=dict((data.factors[i], sorted(list(set(data.colsettings[:,i])), ncmp)) for i in range(len(data.factors)))
        #print data.settings
        

    def OnFactorSelect(self, event): # wxGlade: DataImportFrame.<event_handler>
        self.setting_lb.Clear()
        ind=event.GetSelection()
        settings=list(set(data.colsettings[:,ind]))
        try:
            map(float, settings)
            settings.sort(ncmp)
        except ValueError:
            settings.sort()
        self.setting_lb.AppendItems(settings)
        self.name_tc.SetValue(event.GetString())
        

    def OnNameEdit(self, event): # wxGlade: DataImportFrame.<event_handler>
        self.factor_lb.SetString(self.factor_lb.GetSelection(), event.GetString())
        if event.GetString() != "":
            data.factors=self.factor_lb.GetItems()
            data.settings=dict((data.factors[i], sorted(list(set(data.colsettings[:,i])), ncmp)) for i in range(len(data.factors)))
        

    def OnSaveFactorDefs(self, event): 
        # wxGlade: DataImportFrame.<event_handler>
        # Create the dialog. In this case the current directory is forced as the starting
        # directory for the dialog, and no default file name is forced. This can easilly
        # be changed in your program. This is an 'save' dialog.
        #
        # Unlike the 'open dialog' example found elsewhere, this example does NOT
        # force the current working directory to change if the user chooses a different
        # directory than the one initially set.
        
        wildcard = "Factor definitions file (*.def)|*.def"     
        
        dlg = wx.FileDialog(
            self, message="Save file as ...", defaultDir=os.getcwd(), 
            defaultFile="factor", wildcard=wildcard, style=wx.SAVE
            )
        
        # This sets the default filter that the user will initially see. Otherwise,
        # the first filter in the list will be used by default.
        dlg.SetFilterIndex(0)
        
        # Show the dialog and retrieve the user response. If it is the OK response, 
        # process the data.
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            
            fp = open(path, 'wb')
            pickle.dump((data.factors, data.settings), fp)
            fp.close()
        
            # Normally, at this point you would save your data using the file and path
            # data that the user provided to you, but since we didn't actually start
            # with any data to work with, that would be difficult.
            # 
            # The code to do so would be similar to this, assuming 'data' contains
            # the data you want to save:
            #
            # fp = file(path, 'w') # Create file anew
            # fp.write(data)
            # fp.close()
            #
            # You might want to add some error checking :-)
            #
        
        # Note that the current working dir didn't change. This is good since
        # that's the way we set it up.
        
        # Destroy the dialog. Don't do this until you are done with it!
        # BAD things can happen otherwise!
        dlg.Destroy()

        

    def OnLoadFactorDefs(self, event): # wxGlade: DataImportFrame.<event_handler>
        wildcard = "Factor definitions file (*.def)|*.def"
        # Create the dialog. In this case the current directory is forced as the starting
        # directory for the dialog, and no default file name is forced. This can easilly
        # be changed in your program. This is an 'open' dialog, and allows multitple
        # file selections as well.
        #
        # Finally, if the directory is changed in the process of getting files, this
        # dialog is set up to change the current working directory to the path chosen.
        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultDir=os.getcwd(), 
            defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
            )
        
        # Show the dialog and retrieve the user response. If it is the OK response, 
        # process the data.
        if dlg.ShowModal() == wx.ID_OK:
            # This returns a Python list of files that were selected.
            paths = dlg.GetPaths()
            print paths
            #for path in paths:
            #    print path
            fp = open(paths[0], 'rb')
            load=pickle.load(fp)
            data.factors=load[0]
            data.settings=load[1]
        # Destroy the dialog. Don't do this until you are done with it!
        # BAD things can happen otherwise!
        dlg.Destroy()
        
        self.factor_lb.Clear()
        self.factor_lb.AppendItems(data.factors)

        

    def OnSaveFactorDefs(self, event): # wxGlade: DataImportFrame.<event_handler>
        print "Event handler `OnSaveFactorDefs' not implemented"
        event.Skip()

# end of class DataImportFrame
class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.filter_hide = False
        self.dpi = 90
        self.fig = Figure((5.0, 4.0), dpi=self.dpi)
        self.fig.subplots_adjust(left=0.08, right=0.95, bottom=0.07)
        self.repolish = True
        self.titletext = ""
        self.xaxis = ""
        self.yaxis = ""
        
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_6 = wx.Panel(self, -1)
        self.panel_12_copy = wx.Panel(self, -1)
        self.panel_2 = wx.Panel(self, -1)
        self.panel_12 = wx.Panel(self, -1)
        self.panel_3 = wx.Panel(self, -1)
        self.panel_4 = wx.Panel(self, -1)
        
        # Menu Bar
        self.MainFrame_menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.FileOpen = wx.MenuItem(self.fileMenu, wx.NewId(), "Open", "", wx.ITEM_NORMAL)
        self.fileMenu.AppendItem(self.FileOpen)
        self.LoadData = wx.MenuItem(self.fileMenu, wx.NewId(), "Load data", "", wx.ITEM_NORMAL)
        self.fileMenu.AppendItem(self.LoadData)
        self.SaveData = wx.MenuItem(self.fileMenu, wx.NewId(), "Save data", "", wx.ITEM_NORMAL)
        self.fileMenu.AppendItem(self.SaveData)
        self.Exit = wx.MenuItem(self.fileMenu, wx.NewId(), "Exit", "Quit MPTuner", wx.ITEM_NORMAL)
        self.fileMenu.AppendItem(self.Exit)
        self.MainFrame_menubar.Append(self.fileMenu, "File")
        self.Plot = wx.Menu()
        self.ShowDataImport = wx.MenuItem(self.Plot, wx.NewId(), "Show data import settings", "", wx.ITEM_NORMAL)
        self.Plot.AppendItem(self.ShowDataImport)
        self.ShowGroupSettings = wx.MenuItem(self.Plot, wx.NewId(), "Show group settings", "", wx.ITEM_NORMAL)
        self.Plot.AppendItem(self.ShowGroupSettings)
        self.MainFrame_menubar.Append(self.Plot, "Data")
        wxglade_tmp_menu = wx.Menu()
        self.SavePlot = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Save plot", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.SavePlot)
        wxglade_tmp_menu_sub = wx.Menu()
        self.ShowBadMarkers = wx.MenuItem(wxglade_tmp_menu_sub, wx.NewId(), "Show markers for bad data", "Show black dots for bad data points", wx.ITEM_CHECK)
        wxglade_tmp_menu_sub.AppendItem(self.ShowBadMarkers)
        self.ShowBadTraces = wx.MenuItem(wxglade_tmp_menu_sub, wx.NewId(), "Show traces for bad data", "Show dotted lines between bad data points", wx.ITEM_CHECK)
        wxglade_tmp_menu_sub.AppendItem(self.ShowBadTraces)
        wxglade_tmp_menu_sub.AppendSeparator()
        self.SetPlotParams = wx.MenuItem(wxglade_tmp_menu_sub, wx.NewId(), "Set title/labels", "Add/edit titles and axes labels", wx.ITEM_NORMAL)
        wxglade_tmp_menu_sub.AppendItem(self.SetPlotParams)
        wxglade_tmp_menu.AppendMenu(wx.NewId(), "Options", wxglade_tmp_menu_sub, "")
        self.MainFrame_menubar.Append(wxglade_tmp_menu, "Plot")
        self.helpMenu = wx.Menu()
        self.About = wx.MenuItem(self.helpMenu, wx.NewId(), "About", "", wx.ITEM_NORMAL)
        self.helpMenu.AppendItem(self.About)
        self.MainFrame_menubar.Append(self.helpMenu, "Help")
        self.SetMenuBar(self.MainFrame_menubar)
        # Menu Bar end
        self.canvas = FigCanvas(self.panel_3, -1, self.fig)
        self.toolbar = NavigationToolbar(self.canvas, )
        self.panel_13 = wx.Panel(self.panel_2, -1)
        self.label_4 = wx.StaticText(self.panel_2, -1, "  Group:      ")
        self.choice_1 = wx.Choice(self.panel_2, -1, choices=[])
        self.panel_13_copy = wx.Panel(self.panel_2, -1)
        self.panel_9 = wx.Panel(self.panel_6, -1)
        self.label_7_copy = wx.StaticText(self.panel_6, -1, "Frame: ")
        self.FrameCtrl = wx.SpinCtrl(self.panel_6, -1, "16", min=0, max=100)
        self.label_6_copy = wx.StaticText(self.panel_6, -1, "cs (Col Eff): ")
        self.csSlider = wx.Slider(self.panel_6, -1, 1500, 0, 10000)
        self.csText = masked.NumCtrl(self.panel_6, -1, "0")
        self.label_5_copy = wx.StaticText(self.panel_6, -1, "ce (Res Eff):")
        self.ceSlider = wx.Slider(self.panel_6, -1, 3000, 0, 10000)
        self.ceText = masked.NumCtrl(self.panel_6, -1, "0")
        self.label_5 = wx.StaticText(self.panel_6, -1, "Inc/Dec: ")
        self.incText = wx.SpinCtrl(self.panel_6, -1, "", min=0, max=100)
        self.label_8 = wx.StaticText(self.panel_6, -1, "Fit: ")
        self.fitText = masked.NumCtrl(self.panel_6, -1, "0")
        self.Recalc = wx.Button(self.panel_6, -1, "Recalculate")
        self.panel_10 = wx.Panel(self.panel_6, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.onFileOpen, self.FileOpen)
        self.Bind(wx.EVT_MENU, self.OnLoadData, self.LoadData)
        self.Bind(wx.EVT_MENU, self.OnSaveData, self.SaveData)
        self.Bind(wx.EVT_MENU, self.onClose, self.Exit)
        self.Bind(wx.EVT_MENU, self.OnShowDataImport, self.ShowDataImport)
        self.Bind(wx.EVT_MENU, self.OnShowGroup, self.ShowGroupSettings)
        self.Bind(wx.EVT_MENU, self.OnSavePlot, self.SavePlot)
        self.Bind(wx.EVT_MENU, self.OnShowBadMarkers, self.ShowBadMarkers)
        self.Bind(wx.EVT_MENU, self.OnShowBadTraces, self.ShowBadTraces)
        self.Bind(wx.EVT_MENU, self.OnSetPlotParams, self.SetPlotParams)
        self.Bind(wx.EVT_MENU, self.onAbout, self.About)
        self.Bind(wx.EVT_CHOICE, self.OnGroupSelect, self.choice_1)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.onSlide, self.csSlider)
        self.Bind(wx.EVT_COMMAND_SCROLL_ENDSCROLL, self.onSlide, self.csSlider)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, self.onSlide, self.csSlider)
        self.Bind(wx.EVT_TEXT, self.onTextEdit, self.csText)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.onSlide, self.ceSlider)
        self.Bind(wx.EVT_COMMAND_SCROLL_ENDSCROLL, self.onSlide, self.ceSlider)
        self.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, self.onSlide, self.ceSlider)
        self.Bind(wx.EVT_TEXT, self.onTextEdit, self.ceText)
        self.Bind(wx.EVT_BUTTON, self.on_recalc_push, self.Recalc)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.onClose)
        self.Bind(wx.EVT_SET_FOCUS, self.onFocus)
        
        self.axes = self.fig.add_subplot(111)
        #self.draw_plot(data.ind,data.data)
        self.initplot=True
        self.canvas.mpl_connect('pick_event', self.OnPick)
        #####
        self.statusbar = ESB.EnhancedStatusBar(self, -1)
        self.SetStatusBar(self.statusbar)
        self.statusbar.SetSize((-1, 25))
        self.statusbar.SetFieldsCount(4)
        self.statusbar.SetStatusWidths([-3, 25, -2, -1])
        self.statusbarText = wx.StaticText(self.statusbar, -1, "    ")
        self.statusbarText.SetBackgroundColour("#FFFFFF")
        #self.statusbarText.SetForegroundColour("#0000FF")
        self.statusbar.AddWidget(self.statusbarText, pos = 1)
        
        self.ShowBadTraces.Check()
        self.ShowBadMarkers.Check()
        

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("MPTuner 0.90")
        self.canvas.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.choice_1.SetMinSize((500, 27))
        self.label_7_copy.SetMinSize((60, 17))
        self.FrameCtrl.SetMinSize((55, 27))
        self.label_6_copy.SetMinSize((76, 17))
        self.csSlider.SetMinSize((140, -1))
        self.csSlider.SetSize((200,-1))
        self.csText.SetMinSize((50, 27))
        self.csText.SetFractionWidth(3)
        self.csText.SetIntegerWidth(2)
        self.csText.SetValue(1.5)
        self.label_5_copy.SetMinSize((76, 17))
        self.ceSlider.SetMinSize((140, -1))
        self.ceText.SetFractionWidth(3)
        self.ceText.SetIntegerWidth(2)
        self.ceText.SetValue(3.0)
        self.label_5.SetMinSize((60, 17))
        self.label_8.SetMinSize((60, 17))
        self.fitText.SetFractionWidth(3)
        self.fitText.SetIntegerWidth(2)
        self.fitText.SetValue(3.0)
        # end wxGlade
        self.fitText.SetValue(0.0)
        self.incText.SetValue(0)
        self.csText.SetValue(0.0)
        self.ceText.SetValue(0.0)
        self.csSlider.SetValue(0)
        self.ceSlider.SetValue(0)
    
        self.SetTitle("MPTuner " + ver)

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        MainSizer = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_6_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_10_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12_copy_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        self.panel_4.SetSizer(sizer_29)
        sizer_13.Add(self.panel_4, 0, wx.EXPAND, 0)
        sizer_12_copy_copy.Add(self.canvas, 1, wx.EXPAND, 0)
        sizer_12_copy_copy.Add(self.toolbar, 0, wx.EXPAND, 0)
        self.panel_3.SetSizer(sizer_12_copy_copy)
        sizer_13.Add(self.panel_3, 1, wx.EXPAND, 0)
        MainSizer.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_22.Add((20, 10), 0, 0, 0)
        self.panel_12.SetSizer(sizer_22)
        MainSizer.Add(self.panel_12, 0, wx.EXPAND, 0)
        sizer_19.Add(self.panel_13, 1, wx.EXPAND, 0)
        sizer_19.Add(self.label_4, 0, 0, 0)
        sizer_19.Add(self.choice_1, 0, 0, 0)
        sizer_19.Add(self.panel_13_copy, 1, wx.EXPAND, 0)
        self.panel_2.SetSizer(sizer_19)
        MainSizer.Add(self.panel_2, 0, wx.EXPAND, 0)
        sizer_22_copy.Add((20, 10), 0, 0, 0)
        self.panel_12_copy.SetSizer(sizer_22_copy)
        MainSizer.Add(self.panel_12_copy, 0, wx.EXPAND, 0)
        sizer_3.Add(self.panel_9, 1, wx.EXPAND, 0)
        sizer_3.Add((10, 20), 0, 0, 0)
        sizer_9_copy.Add(self.label_7_copy, 0, 0, 0)
        sizer_9_copy.Add(self.FrameCtrl, 0, 0, 0)
        sizer_8_copy.Add(sizer_9_copy, 1, wx.EXPAND, 0)
        sizer_8_copy.Add(sizer_10_copy, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_8_copy, 0, wx.EXPAND, 0)
        sizer_3.Add((10, 20), 0, 0, 0)
        sizer_7_copy.Add(self.label_6_copy, 0, 0, 0)
        sizer_7_copy.Add(self.csSlider, 0, 0, 0)
        sizer_7_copy.Add(self.csText, 0, 0, 0)
        sizer_5_copy.Add(sizer_7_copy, 1, wx.EXPAND, 0)
        sizer_6_copy.Add(self.label_5_copy, 0, 0, 0)
        sizer_6_copy.Add(self.ceSlider, 0, 0, 0)
        sizer_6_copy.Add(self.ceText, 0, 0, 0)
        sizer_5_copy.Add(sizer_6_copy, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_5_copy, 0, wx.EXPAND, 0)
        sizer_3.Add((10, 20), 0, 0, 0)
        sizer_20.Add(self.label_5, 0, 0, 0)
        sizer_20.Add(self.incText, 0, 0, 0)
        sizer_2.Add(sizer_20, 1, wx.EXPAND, 0)
        sizer_21.Add(self.label_8, 0, 0, 0)
        sizer_21.Add(self.fitText, 0, 0, 0)
        sizer_2.Add(sizer_21, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_2, 0, wx.EXPAND, 0)
        sizer_3.Add((10, 20), 0, 0, 0)
        sizer_5.Add(self.Recalc, 0, wx.ALIGN_BOTTOM, 0)
        sizer_3.Add(sizer_5, 0, wx.EXPAND, 0)
        sizer_3.Add(self.panel_10, 1, wx.EXPAND, 0)
        self.panel_6.SetSizer(sizer_3)
        MainSizer.Add(self.panel_6, 0, wx.EXPAND, 0)
        self.SetSizer(MainSizer)
        MainSizer.Fit(self)
        self.Layout()
        # end wxGlade
             
        
    def draw_plot(self, x, y, clear=False, bad_data=False, 
            scatter=False, label=array([])):
        if clear:
            self.axes.clear()
        self.axes = self.fig.add_subplot(111)
        cycle = ("#00FFFF","#0000FF","#8A2BE2","#A52A2A","#5F9EA0","#D2691E",
            "#DC143C","#006400","#8B008B","#FF8C00","#8B0000","#FF1493",
            "#696969","#FFD700","#4B0082","#00FF00","#191970","#FF4500",
            "#FF0000","#FF6347")
        self.axes.set_color_cycle(cycle)
        if bad_data:
            self.axes.plot(x, y, linestyle='-.', picker=True, label="bad")
        elif not scatter:
            self.axes.plot(x,y, picker=True, label="good")
        elif scatter:
            self.axes.plot(x,y,linestyle="None",marker='o',
                markerfacecolor='black',markersize=2, picker=True, 
                label="scatter")
        self.canvas.draw()
        
    def OnPick(self, event):
        thisline = event.artist
        xdata = thisline.get_xdata()
        ydata = thisline.get_ydata()
        ind = event.ind
        col = thisline.get_c()
        label = thisline.get_label()
        if label == "good":
            masked = ma.masked_invalid(data.data[:,data.cols])
        elif label == "bad":
            masked = ma.masked_array(data=data.data[:,data.cols], 
                mask = data.mask())
        elif label=="scatter":
            masked=ma.masked_array(data=data.data[:,data.cols], 
                mask = invert(data.mask()))
        colname_sub = data.colnames[data.cols]
        for i in arange(len(masked[0, :])):
            if (ydata == masked[:, i]).all(): 
                print i
                match=i
                self.statusbar.SetStatusText(colname_sub[i],2)
                self.statusbarText = wx.StaticText(self.statusbar, -1, "   TEST  ")
                self.statusbarText.SetBackgroundColour(col)
                self.statusbar.AddWidget(self.statusbarText, pos = 1)

    def on_recalc_push(self, event): # wxGlade: MainFrame.<event_handler>
        i = self.choice_1.GetSelection()
        #method = self.Method.GetSelection()
        #print method
        if i != 0:
            #if method == 0:
            start = time()
            data.do_seq_polish(self.FrameCtrl.GetValue(), cs = self.csText.GetValue(), 
                ce = self.ceText.GetValue(), seq = self.incText.GetValue(), 
                fit = self.fitText.GetValue(), cols=data.cols, save_polish = config.getboolean("output", "write_polish"))
            stop = time()
            print "seq polish finished in "+str(stop - start)
            #if method == 1:
            #    data.do_running_polish(self.FrameCtrl.GetValue(), cs = self.csText.GetValue(), ce = self.ceText.GetValue(), cols=data.cols)
            
        self.build_plot()
        if i != -1:
            ind = self.choice_1.GetClientData(i)['index']
            s = self.choice_1.GetClientData(i)
            #s['method'] = self.
            #s['method'] = self.Method.GetSelection()
            s['frame'] = self.FrameCtrl.GetValue()
            #s['lag'] = self.LagCtrl.GetValue()
            s['cs'] = self.csText.GetValue()
            s['ce'] = self.ceText.GetValue()
            self.choice_1.SetClientData(i, s)
        
    def build_plot(self):
#        #Overlay true data
#        m = ma.masked_invalid(clean.data).mask
#        polish_m = ma.mask_or(data.colmask, data.resmask)        
#        #TP
#        tp = invert(invert(m) + invert(polish_m))
#        fn = invert(invert(m) + polish_m)
#        fp = invert(m + invert(polish_m))
#        choices = [ 'Show true positives', 'Show false negatives', 'Show false positives', 'Show MP cleaned data', 'Show true cleaned data' ]
 #       dialog = wx.SingleChoiceDialog ( None, 'Error type:', 'Show error type...', choices )
 #       if dialog.ShowModal() == wx.ID_OK:
 #           show = dialog.GetSelection()
 #           if show == 0:
 #               mask = tp
 #           if show == 1:
 #               mask = fn
 #           if show == 2:
 #               mask = fp
 #          if show == 3:
 #              mask = polish_m
  #          if show == 4:
  #              mask = m
  #      else:
  #         print 'You did not select anything.'
  #      dialog.Destroy()
        
        # Get current axis limits so we can resore them after recalc
        yl = self.axes.get_ylim()
        xl = self.axes.get_xlim()
        
        #polish_m = ma.mask_or(data.colmask, data.resmask)
        #mask = ma.mask_or(data.tmpmask, polish_m)
        
        mask = data.mask()
        if mask.shape == ():
            mask = ma.make_mask_none(data.data.shape)
        
        if self.ShowBadTraces.IsChecked():
            #self.draw_plot(data.ind, ma.masked_invalid(data.data[:,data.cols]),clear=True,bad_data=True)
            #self.draw_plot(data.ind, ma.masked_array(data=data.data[:,data.cols], mask = ma.mask_or(data.colmask[:,data.cols], data.resmask[:,data.cols])),clear=False)
            self.draw_plot(data.ind, ma.masked_invalid(data.data[:,data.cols]),clear=True,bad_data=True)
            self.draw_plot(data.ind, ma.masked_array(data=data.data[:,data.cols], mask = mask[:,data.cols]),clear=False)
        else:
            #self.draw_plot(data.ind, ma.masked_array(data=data.data[:,data.cols], mask = ma.mask_or(data.colmask[:,data.cols], data.resmask[:,data.cols])),clear=True)
            self.draw_plot(data.ind, ma.masked_array(data=data.data[:,data.cols], mask = mask[:,data.cols]),clear=True)
        
        if self.ShowBadMarkers.IsChecked():
            #self.draw_plot(data.ind, ma.masked_array(data=data.data[:,data.cols], mask = invert(ma.mask_or(data.colmask[:,data.cols], data.resmask[:,data.cols]))),clear=False,scatter=True)
            self.draw_plot(data.ind, ma.masked_array(data=data.data[:,data.cols], mask = invert(mask[:,data.cols])),clear=False,scatter=True)
        
        if self.initplot:
            y = self.axes.get_ylim()
            buffer = 0.05 * (y[1] - y[0])
            #y[0] = y[0] - buffer
            self.axes.set_ylim(y[0] - buffer, y[1])
            self.initplot=False
        else:
            self.axes.set_ylim(yl)
            self.axes.set_xlim(xl)
            
        #self.fig.suptitle('Polished data (cs=%s, ce=%s)'%(self.csText.GetValue(),self.ceText.GetValue()), fontsize=12)
        #for label in self.axes.get_xticklabels():
        # label is a Text instance
        #    label.set_rotation(45)

        self.canvas.draw()        

    def onClose(self, event): # wxGlade: MainFrame.<event_handler>
        self.Destroy()
        
        
    def onFocus(self):
        ind = []
        for i in range(len(data.group_cols)):
            if len(data.group_cols[i]) > 0: ind.append(i)
        self.choice_1.Clear()
        groups = array([', '.join(data.groups[i]) for i in range(len(data.groups))])
        print groups
        print groups.tolist()
        newgroups = []
        for setting in groups.tolist():
            tmpstr = ""
            for i, entry in enumerate(setting.split(", ")):
                tmpstr += data.factors[i] + " = " + entry + "; "
            newgroups.append(tmpstr.rstrip("; "))
        print newgroups
        groups = array(newgroups)
        if len(groups[ind]) > 0 :
            self.choice_1.AppendItems(groups[ind].tolist())
        for i in range(len(ind)):
            d = {'method':0,
             'frame':default_frame,
             'lag':default_lag,
             'cs':default_cs,
             'ce':default_ce,
             'fit':default_fit,
             'inc':default_inc,
             'p':0.0,
             'index':ind[i]
            }
            #self.choice_1.SetClientData(i, ind[i])
            self.choice_1.SetClientData(i, d)
            alldict = {'method':0,
             'frame':default_frame,
             'lag':default_lag,
             'cs':default_cs,
             'ce':default_ce,
             'fit':default_fit,
             'inc':default_inc,
             'p':0.0,
             'index':-1
            }
        self.choice_1.Insert("Show all (no factor grouping)", 0, alldict)

    def onAbout(self, event): # wxGlade: MainFrame.<event_handler>
        msg = """ MPTuner version 0.90\n
                   \n
           http://
                """
        dlg = wx.MessageDialog(self, msg, "About", wx.OK)
        dlg.ShowModal()
        dlg.Destroy()
        

    def onSlide(self, event): # wxGlade: MainFrame.<event_handler>
        self.csText.SetValue(float(self.csSlider.GetValue())/1000)
        self.ceText.SetValue(float(self.ceSlider.GetValue())/1000)
        

    def onTextEdit(self, event): # wxGlade: MainFrame.<event_handler>
        self.csSlider.SetValue(self.csText.GetValue()*1000)
        self.ceSlider.SetValue(self.ceText.GetValue()*1000)
        

    def OnPlotOptionApply(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnPlotOptionApply' not implemented"
        

    def onGroupMenu(self, event): # wxGlade: MainFrame.<event_handler>
        Group=FactorFrame(frame_1, -1, "")
        #Group.Show()
        

    def onApplyFilter(self, event): # wxGlade: MainFrame.<event_handler>
        self.tree.clear_filter()
        self.tree.set_filter()
        include_cols=[[] for i in range(len(Factors))]
        for i in range(len(Factors)):
            criteria=self.tree.filter[Factors[i]]
            for index, setting in enumerate(data.colsettings[:,i]):
                if setting in criteria: include_cols[i].append(index)
        cols=np.arange(0,len(data.colsettings[:,0]))
        for list in include_cols:
            cols=np.intersect1d(cols,list)
        print cols
        data.cols=cols
        

    def OnSavePlot(self, event): # wxGlade: MainFrame.<event_handler>
        file_choices = "PNG (*.png)|*.png"

        dlg = wx.FileDialog(
            self, 
            message="Save plot as...",
            defaultDir=os.getcwd(),
            defaultFile="plot.png",
            wildcard=file_choices,
            style=wx.SAVE)

        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.canvas.print_figure(path, dpi=self.dpi)
        

    def OnPlotOptions(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnPlotOptions' not implemented"
        

    def onFilterShow(self, event): # wxGlade: MainFrame.<event_handler>
        if self.filter_hide:
            self.panel_4.Show()
            self.filter_hide=False
        else:
            self.panel_4.Hide()
            self.filter_hide=True
        self.Layout()
        

    def onFileOpen(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `onFileOpen' not implemented"
        

    def onClearFilter(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `onClearFilter' not implemented"
        

    def onHideFilter(self, event): # wxGlade: MainFrame.<event_handler>
        if self.HideFilterMenu.IsChecked():
            self.panel_4.Hide()
        else:
            self.panel_4.Show()
        self.Layout()
        

    def OnShowDataImport(self, event): # wxGlade: MainFrame.<event_handler>
        data_import=DataImportFrame(frame_1, -1, "")
        app.SetTopWindow(data_import)
        data_import.Show()
        

    def OnShowGroup(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnShowGroup' not implemented"
        Group=GroupFrame(frame_1, -1, "")
        app.SetTopWindow(Group)
        Group.Show()
        

    def OnShowBadMarkers(self, event): # wxGlade: MainFrame.<event_handler>
        self.build_plot()
        

    def OnShowBadTraces(self, event): # wxGlade: MainFrame.<event_handler>
        self.build_plot()
        

    def OnSetPlotParams(self, event): # wxGlade: MainFrame.<event_handler>
        #print "Event handler `OnSetPlotParams' not implemented"
        #strs = self.choice_1.GetStrings()
        #x.append("TEST")
        #self.choice_1.Clear()
        #self.choice_1.AppendItems(x)
        PlotParam = PlotOptions(frame_1, -1, "a")
        app.SetTopWindow(PlotParam)
        PlotParam.Show()
        

    def OnGroupSelect(self, event): # wxGlade: MainFrame.<event_handler>
        if event.GetClientData()['index'] == -1:
            data.cols = np.arange(0,data.data.shape[1])
        else:
            data.cols = data.group_cols[event.GetClientData()['index']]   
        i = event.GetSelection()
        if i == 0:
            #self.LagCtrl.Disable()
            self.FrameCtrl.Disable()
            self.csText.Disable()
            self.ceText.Disable()
            #self.Method.Disable()
            
        if i > 0: # !=1
            s = event.GetClientData()
            #self.Method.SetSelection(s['method'])
            self.FrameCtrl.SetValue(s['frame'])
            #self.LagCtrl.SetValue(s['lag'])
            self.csText.SetValue(s['cs'])
            self.ceText.SetValue(s['ce'])
            self.fitText.SetValue(s['fit'])
            self.incText.SetValue(s['inc'])
            print s
            
            #self.LagCtrl.Enable()
            self.FrameCtrl.Enable()
            self.csText.Enable()
            self.ceText.Enable()
            #self.Method.Enable()
        
    def OnLoadData(self, event): # wxGlade: MainFrame.<event_handler>
        wildcard = "Data file (*.csv)|*.csv"
        self.statusbar.SetStatusText("Loading data...",0)
        dlg = wx.FileDialog(
            self, message="Choose a data file",
            defaultDir=os.getcwd(), 
            defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            global data
            # This returns a Python list of files that were selected.
            paths = dlg.GetPaths()
            #print paths
            try:
                data = DataObj(paths[0])
                data.cols = arange(data.data.shape[1])
                self.statusbar.SetStatusText("Loaded " + paths[0] + " successfully.",0)
                #Plot the data
                self.draw_plot(data.ind, ma.masked_invalid(data.data[:,:]),clear=True)#,bad_data=True)
                #Fix the axis labels
                y = self.axes.get_ylim()
                buffer = 0.05 * (y[1] - y[0])
                #y[0] = y[0] - buffer
                self.axes.set_ylim(y[0] - buffer, y[1])
            except:
                dial = wx.MessageDialog(None, 'Error loading file', 'Error', wx.OK | 
                    wx.ICON_ERROR)
                dial.ShowModal()
                self.statusbar.SetStatusText("Load data failed.",0)

        dlg.Destroy()

        

    def OnSaveData(self, event): # wxGlade: MainFrame.<event_handler>
        wildcard = "CSV file (*.csv)|*.csv"     
        
        dlg = wx.FileDialog(
            self, message="Save file as ...", defaultDir=os.getcwd(), 
            defaultFile="clean", wildcard=wildcard, style=wx.SAVE
            )
        
        dlg.SetFilterIndex(0)
        
        if dlg.ShowModal() == wx.ID_OK:
            
            path = dlg.GetPath()
            path = path.replace(".csv", "")
            ext = ".csv"
            #if not path.endswith(".csv"): ext = ".csv"
            
            fp = open(path + ext, 'wb')
            writer = csv.writer(fp)
            writer.writerows(data.outdata())
            fp.close()
            
            if config.getboolean("output", "write_masks"):
            
                colsave = open(path + "_mask_col" + ext, "wb")
                writer = csv.writer(colsave)
                writer.writerows(data.outmask(data.colmask))
                colsave.close
                
                ressave = open(path + "_mask_res" + ext, "wb")
                writer = csv.writer(ressave)
                writer.writerows(data.outmask(data.resmask))
                ressave.close
                
                fitsave = open(path + "_mask_fit" + ext, "wb")
                writer = csv.writer(fitsave)
                writer.writerows(data.outmask(data.fitmask))
                fitsave.close
                
                incsave = open(path + "_mask_seq" + ext, "wb")
                writer = csv.writer(incsave)
                writer.writerows(data.outmask(data.incmask))
                incsave.close
                
                fullsave = open(path + "_mask_full" + ext, "wb")
                writer = csv.writer(fullsave)
                writer.writerows(data.outmask(data.mask()))
                fullsave.close
            
            if config.getboolean("output", "write_polish"):
                
                ovesave = open(path + "_polish_overall" + ext, "wb")
                writer = csv.writer(ovesave)
                writer.writerows(data.outpolish(data.overall))
                ovesave.close
                
                rowsave = open(path + "_polish_row" + ext, "wb")
                writer = csv.writer(rowsave)
                writer.writerows(data.outpolish(data.roweff))
                rowsave.close
                
                colsave = open(path + "_polish_col" + ext, "wb")
                writer = csv.writer(colsave)
                writer.writerows(data.outpolish(data.coleff))
                colsave.close
                
                ressave = open(path + "_polish_residuals" + ext, "wb")
                writer = csv.writer(ressave)
                writer.writerows(data.outpolish(data.residuals))
                ressave.close
        
        dlg.Destroy()
# end of class MainFrame

if __name__ == "__main__":
    #clean = DataObj('alldep-zoe.csv')
    
    parser = optparse.OptionParser()
    parser.add_option("-d", "--data", dest="filename", default="", type="string", help="specify filename of the csv data file")
    (options, args) = parser.parse_args()
    
    config = ConfigParser.ConfigParser()
    config.read("config.txt")
    
    default_frame = config.getint("polish_defaults", "frame")
    default_lag = config.getint("polish_defaults", "lag")
    default_cs = config.getfloat("polish_defaults", "cs")
    default_ce = config.getfloat("polish_defaults", "ce")
    default_fit = config.getfloat("polish_defaults", "fit")
    default_inc = config.getint("polish_defaults", "seq")
    
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MainFrame(None, -1, "")
    frame_1.panel_4.Hide()
    app.SetTopWindow(frame_1)
    frame_1.Show()
    
    #If the user was kind enough to give us a data file, open and plot it
    if not options.filename == "":
        print options.filename
        data = DataObj(options.filename)
        data.cols = arange(data.data.shape[1])
        #Plot the data
        frame_1.draw_plot(data.ind, ma.masked_invalid(data.data[:,:]),clear=True)#,bad_data=True)
        #Fix the axis labels
        y = frame_1.axes.get_ylim()
        buffer = 0.05 * (y[1] - y[0])
        frame_1.axes.set_ylim(y[0] - buffer, y[1])
        
    app.MainLoop()
